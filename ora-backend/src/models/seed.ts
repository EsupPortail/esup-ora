import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();
async function main() {
  console.log("üîÑ Reset des donn√©es...");

  // R√©cup√©rer les noms des tables via Prisma
  const tables = await prisma.$queryRaw<
    { tablename: string }[]
  >`SELECT tablename FROM pg_tables WHERE schemaname='public'`;

  await prisma.$transaction(
    tables.map(({ tablename }) =>
      prisma.$executeRawUnsafe(`TRUNCATE TABLE "${tablename}" RESTART IDENTITY CASCADE;`)
    )
  );

  console.log("‚úÖ Toutes les donn√©es ont √©t√© supprim√©es !");
  console.log('Injection du seed...')

  const typeDIplomeLicence = await prisma.type_diplome.create({
    data: {
      libelle: "Licence",
      heures: 680,
      credits: 180,
    },
  });
  const typeDIplomeMaster = await prisma.type_diplome.create({
    data: {
      libelle: "Master",
      heures: 240,
      credits: 120,
    },
  });
  const defaultParametre = await prisma.parametre.create({
    data: {
      libelle: "Param√®tre UNICAEN TEST s√©mantique",
      description: "Ceci est un param√®tre de test inject√© depuis le seed",
      duree_formation: 6,
      duree_formation_unite: "semestre",
      semantique_competence: "Comp√©tence",
      semantique_apprentissage: "Apprentissages",
      semantique_famille: "Famille Situation",
      semantique_critere: "Crit√®re",
      semantique_bcc: "BCC",
      semantique_ue: "UE",
      semantique_ec: "EC",
      type_diplomes: {
        connect: [{ id: typeDIplomeLicence.id }, { id: typeDIplomeMaster.id }],
      },
    },
  });

  const defaultEtablissement = await prisma.etablissement.create({
    data: {
      code: "UNICAEN",
      libelle: "√âtab Universit√© de Caen, Normandie",
      parametre: {
        connect: { id: defaultParametre.id },
      },
    },
  });

  // Composantes
  const defaultComposanteScience = await prisma.composante.create({
    data: {
      libelle: "Comp UFR des Sciences",
      code: "UFRS",
      etablissement: {
        connect: { id: defaultEtablissement.id },
      },
      parametre: {
        connect: { id: defaultParametre.id },
      },
    },
  });

  const typeFormationInformatique = await prisma.type_formation.create({
    data: {
      libelle: "Informatique",
    },
  });

  // Diplomes
  const defaultDiplomeLicence = await prisma.diplome.create({
    data: {
      libelle: "Licence",
    },
  });
  const defaultDiplomeMasterInformatique = await prisma.diplome.create({
    data: {
      libelle: "Master",
    },
  });
  const defaultDiplomeDU = await prisma.diplome.create({
    data: {
      libelle: "DU",
    },
  });
  const defaultDiplomeBUT = await prisma.diplome.create({
    data: {
      libelle: "BUT",
    },
  });
  const defaultDiplomeIngenieur = await prisma.diplome.create({
    data: {
      libelle: "Ing√©nieur",
    },
  });

  // Formations
  const formationIA = await prisma.formation.create({
    data: {
      libelle: "Master Informatique Science des donn√©es",
      duree: 2,
      duree_unite: "Ann√©es",
      nb_credits: 180,
      nb_heures_enseignement: 2000,
      nombre_de_niveaux: 3,
      composante: {
        connect: { id: defaultComposanteScience.id },
      },
      diplome: {
        connect: { id: defaultDiplomeMasterInformatique.id },
      },
    },
  });

  const parcoursIA = await prisma.parcours.create({
    data: {
      libelle: "Intelligence artificielle",
      description:
        "Le parcours Intelligence Artificielle (IA) est un parcours de Master 2 de l‚ÄôUniversit√© de Caen Normandie. Il est ouvert aux √©tudiants titulaires d‚Äôun Master 1 en informatique ou √©quivalent. Ce parcours est une formation de haut niveau en IA, qui permet aux √©tudiants de se sp√©cialiser dans ce domaine en pleine expansion. Les √©tudiants suivent des enseignements th√©oriques et pratiques en IA, en apprentissage automatique, en traitement automatique du langage naturel, en vision par ordinateur, en robotique, etc. Les √©tudiants r√©alisent √©galement un projet de recherche en IA, encadr√© par un enseignant-chercheur du GREYC, laboratoire de recherche en informatique de l‚ÄôUniversit√© de Caen Normandie.",
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });

  const parcoursCybersecu = await prisma.parcours.create({
    data: {
      libelle: "Cybers√©curit√©",
      description:
        "Le parcours Cybers√©curit√© est un parcours de Master 2 de l‚ÄôUniversit√© de Caen Normandie. Il est ouvert aux √©tudiants titulaires d‚Äôun Master 1 en informatique ou √©quivalent. Ce parcours est une formation de haut niveau en cybers√©curit√©, qui permet aux √©tudiants de se sp√©cialiser dans ce domaine en pleine expansion. Les √©tudiants suivent des enseignements th√©oriques et pratiques en cybers√©curit√©, en cryptographie, en s√©curit√© des syst√®mes d‚Äôinformation, en s√©curit√© des r√©seaux, en s√©curit√© des applications, etc. Les √©tudiants r√©alisent √©galement un projet de recherche en cybers√©curit√©, encadr√© par un enseignant-chercheur du GREYC, laboratoire de recherche en informatique de l‚ÄôUniversit√© de Caen Normandie.",
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });

  const parcoursTechnoWeb = await prisma.parcours.create({
    data: {
      libelle: "Technologies du Web",
      description:
        "Le parcours Technologies du Web est un parcours de Master 2 de l‚ÄôUniversit√© de Caen Normandie. Il est ouvert aux √©tudiants titulaires d‚Äôun Master 1 en informatique ou √©quivalent. Ce parcours est une formation de haut niveau en cybers√©curit√©, qui permet aux √©tudiants de se sp√©cialiser dans ce domaine en pleine expansion. Les √©tudiants suivent des enseignements th√©oriques et pratiques en cybers√©curit√©, en cryptographie, en s√©curit√© des syst√®mes d‚Äôinformation, en s√©curit√© des r√©seaux, en s√©curit√© des applications, etc. Les √©tudiants r√©alisent √©galement un projet de recherche en cybers√©curit√©, encadr√© par un enseignant-chercheur du GREYC, laboratoire de recherche en informatique de l‚ÄôUniversit√© de Caen Normandie.",
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });

  const version10 = await prisma.version.create({
    data: {
      libelle: "1.0",
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });

  const periode1 = await prisma.periodes.create({
    data: {
      libelle: "Semestre 1",
      version: {
        connect: { id: version10.id },
      },
    },
  });
  const periode2 = await prisma.periodes.create({
    data: {
      libelle: "Semestre 2",
      version: {
        connect: { id: version10.id },
      },
    },
  });
  const periode3 = await prisma.periodes.create({
    data: {
      libelle: "Semestre 3",
      version: {
        connect: { id: version10.id },
      },
    },
  });
  const periode4 = await prisma.periodes.create({
    data: {
      libelle: "Semestre 4",
      version: {
        connect: { id: version10.id },
      },
    },
  });

  const competenceDevAppli = await prisma.competence.create({
    data: {
      libelle: "R√©aliser un d√©veloppement d'application",
      color_hexadecimal: '#B2C453',
      version: {
        connect: { id: version10.id },
      },
    },
  });

  const c1ce1 = await prisma.contexte_evaluation.create({
    data: {
      libelle: "√âlaborer une application informatique",
      ordre: 1,
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });
  const c1ce2 = await prisma.contexte_evaluation.create({
    data: {
      libelle: "Faire √©voluer une application",
      ordre: 2,
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });
  const c1ce3 = await prisma.contexte_evaluation.create({
    data: {
      libelle:
        "Maintenir en conditions op√©rationnelles une application informatique",
      ordre: 3,
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });

  const critereExigence1 = await prisma.critere_exigence.create({
    data: {
      libelle: "En respectant les besoins d√©crits par le client",
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });

  const critereExigence2 = await prisma.critere_exigence.create({
    data: {
      libelle: "En appliquant les principes algorithmiques",
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });

  const critereExigence3 = await prisma.critere_exigence.create({
    data: {
      libelle: "En veillant √† la qualit√© du code et √† sa documentation",
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });

  const critereExigence4 = await prisma.critere_exigence.create({
    data: {
      libelle: "En choisissant les ressources techniques appropri√©es",
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });

  // CARACTERE EVALUABLE TYPE
  const caracEvaluables = await prisma.caractere_evaluable_type.createMany({
    data: [
      {
        libelle: "Mani√®re de communiquer",
      },
      {
        libelle:
          "Maitrise des ressources internes (gestes, savoirs, savoir-faire) ou externes",
      },
      {
        libelle:
          "Maitrise des r√®gles ou des contraintes (d√©ontologie, besoins, al√©as, impr√©vus)",
      },
      {
        libelle: "M√©thodologie",
      },
      {
        libelle: "Qualit√© du r√©sultat",
      },
    ],
  });

  const competenceOptiAppli = await prisma.competence.create({
    data: {
      libelle: "Optimiser des applications informatiques",
      color_hexadecimal: '#287A8F',
      version: {
        connect: { id: version10.id },
      },
    },
  });
  const c2ce1 = await prisma.contexte_evaluation.create({
    data: {
      libelle:
        "Am√©liorer les performances des programmes dans des contextes contraints",
      ordre: 1,
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });
  const c2ce2 = await prisma.contexte_evaluation.create({
    data: {
      libelle:
        "Limiter l'impact environnemental d'une application informatique",
      ordre: 2,
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });
  const c2ce3 = await prisma.contexte_evaluation.create({
    data: {
      libelle:
        "Mettre en place des applicaitons informatiques adapt√©es et innovantes",
      ordre: 3,
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });
  const critereC2Exigence1 = await prisma.critere_exigence.create({
    data: {
      libelle: "En formalisant et mod√©lisant des situations complexes",
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });

  const critereC2Exigence2 = await prisma.critere_exigence.create({
    data: {
      libelle:
        "En recensant les algorithmes et les structures de donn√©es usuels",
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });

  const critereC2Exigence3 = await prisma.critere_exigence.create({
    data: {
      libelle: "En s'appuyant sur des sch√©mas de raisonnement",
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });

  const critereC2Exigence4 = await prisma.critere_exigence.create({
    data: {
      libelle: "En justifiant les choix et validant les r√©sultats",
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });

  const competenceAdministrerSystemes = await prisma.competence.create({
    data: {
      libelle: "Administrer des syst√®mes informatiques communicants",
      color_hexadecimal: '#A5A0A0',
      version: {
        connect: { id: version10.id },
      },
    },
  });
  const critereC3Exigence1 = await prisma.critere_exigence.create({
    data: {
      libelle: "En s√©curisant le syst√®me d'information",
      competence: {
        connect: { id: competenceAdministrerSystemes.id },
      },
    },
  });

  const critereC3Exigence2 = await prisma.critere_exigence.create({
    data: {
      libelle:
        "En appliquant les normes en vigueur et les bonnes pratiques architecturales et de s√©curit√©",
      competence: {
        connect: { id: competenceAdministrerSystemes.id },
      },
    },
  });

  const critereC3Exigence3 = await prisma.critere_exigence.create({
    data: {
      libelle: "En offrant une qualit√© de service optimale",
      competence: {
        connect: { id: competenceAdministrerSystemes.id },
      },
    },
  });

  const critereC3Exigence4 = await prisma.critere_exigence.create({
    data: {
      libelle: "En assurant la continuit√© d'activit√©",
      competence: {
        connect: { id: competenceAdministrerSystemes.id },
      },
    },
  });

  const c1niveau1 = await prisma.niveau.create({
    data: {
      libelle: "D√©butant",
      description: "D√©velopper des applications informatiques simples",
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });

  const n1ac1 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Impl√©menter des conceptions simples",
      ordre: 1,
      niveau: {
        connect: { id: c1niveau1.id },
      },
    },
  });
  const n1ac2 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "√âlaborer des conceptions simples",
      ordre: 2,
      niveau: {
        connect: { id: c1niveau1.id },
      },
    },
  });
  const n1ac3 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Faire des essais et √©valuer leurs r√©sultats en regard de sp√©cifications",
      ordre: 3,
      niveau: {
        connect: { id: c1niveau1.id },
      },
    },
  });
  const n1ac4 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "D√©velopper des interfaces utilisateurs",
      ordre: 4,
      niveau: {
        connect: { id: c1niveau1.id },
      },
    },
  });

  const c1niveau2 = await prisma.niveau.create({
    data: {
      libelle: "Interm√©diaire",
      description: "Partir des exigences et aller jusqu'√† l'application",
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });
  const n2ac1 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Adopter de bonnes pratiques de conception et de programmation",
      ordre: 1,
      niveau: {
        connect: { id: c1niveau2.id },
      },
    },
  });
  const n2ac2 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Elaborer et impl√©menter les sp√©cifications fonctionneles √† partir des exigences",
      ordre: 2,
      niveau: {
        connect: { id: c1niveau2.id },
      },
    },
  });
  const n2ac3 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "V√©rifier et valider la qualit√© de l'application par les tests",
      ordre: 3,
      niveau: {
        connect: { id: c1niveau2.id },
      },
    },
  });
  const n2ac4 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Appliquer les principes d'accessibilit√© et d'ergonomie",
      ordre: 4,
      niveau: {
        connect: { id: c1niveau2.id },
      },
    },
  });
  const c1niveau3 = await prisma.niveau.create({
    data: {
      libelle: "Comp√©tent",
      description: "Adapter des applications sur un ensemble de supports",
      competence: {
        connect: { id: competenceDevAppli.id },
      },
    },
  });
  const n3ac1 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Choisir et impl√©menter les architectures adapt√©es",
      ordre: 1,
      niveau: {
        connect: { id: c1niveau3.id },
      },
    },
  });
  const n3ac2 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Faire √©voluer une application existante",
      ordre: 2,
      niveau: {
        connect: { id: c1niveau3.id },
      },
    },
  });
  const n3ac3 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Int√©grer des solutions dans un environnement de production",
      ordre: 4,
      niveau: {
        connect: { id: c1niveau3.id },
      },
    },
  });

  const c2niveau1 = await prisma.niveau.create({
    data: {
      libelle: "D√©butant",
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });
  const c2n1ac1 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Analyser un probl√®me avec m√©thode",
      ordre: 1,
      niveau: {
        connect: { id: c2niveau1.id },
      },
    },
  });
  const c2n1ac2 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Comparer des algorithmes pour des probl√®mes classiques",
      ordre: 2,
      niveau: {
        connect: { id: c2niveau1.id },
      },
    },
  });
  const c2n1ac3 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Formaliser et mettre en oeuvre des outils math√©matiques pour informatique",
      ordre: 3,
      niveau: {
        connect: { id: c2niveau1.id },
      },
    },
  });
  const c2niveau2 = await prisma.niveau.create({
    data: {
      libelle: "Interm√©diaire",
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });
  const c2n2ac1 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Choisir des structures de donn√©es complexes adapt√©es au probl√®me",
      ordre: 1,
      niveau: {
        connect: { id: c2niveau2.id },
      },
    },
  });
  const c2n2ac2 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Utiliser des techniques algorithmiques adapt√©es pour des probl√®mes complexes",
      ordre: 2,
      niveau: {
        connect: { id: c2niveau2.id },
      },
    },
  });
  const c2n2ac3 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Comprendre les enjeux et moyens de s√©curisation des donn√©es et du code",
      ordre: 3,
      niveau: {
        connect: { id: c2niveau2.id },
      },
    },
  });
  const c2n2ac4 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "√âvaluer l\impact environnemental et soci√©tal des solutions propos√©es",
      ordre: 3,
      niveau: {
        connect: { id: c2niveau2.id },
      },
    },
  });
  const c2niveau3 = await prisma.niveau.create({
    data: {
      libelle: "Comp√©tent",
      competence: {
        connect: { id: competenceOptiAppli.id },
      },
    },
  });
  const c2n3ac1 = await prisma.apprentissage_critique.create({
    data: {
      libelle: "Anticiper les r√©sultats de diverses m√©triques",
      ordre: 1,
      niveau: {
        connect: { id: c2niveau3.id },
      },
    },
  });
  const c2n3ac2 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Profiler, analyser et justifier le comportement d'un code existant",
      ordre: 2,
      niveau: {
        connect: { id: c2niveau3.id },
      },
    },
  });
  const c2n3ac3 = await prisma.apprentissage_critique.create({
    data: {
      libelle:
        "Choisir et utiliser des biblioth√®ques et m√©thodes d√©di√©es au domaine d'application",
      ordre: 3,
      niveau: {
        connect: { id: c2niveau3.id },
      },
    },
  });

  //Partie EC & enseignements
  const e1p1 = await prisma.enseignement.create({
    data: {
      libelle: "Initiation au d√©veloppement",
      periode: {
        connect: { id: periode1.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e2p1 = await prisma.enseignement.create({
    data: {
      libelle: "D√©veloppement d'interfaces web",
      periode: {
        connect: { id: periode1.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e3p1 = await prisma.enseignement.create({
    data: {
      libelle: "Introduction √† l\architecture",
      periode: {
        connect: { id: periode1.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e4p1 = await prisma.enseignement.create({
    data: {
      libelle: "Introduction au syst√®me",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
      apprentissages_critiques: {
        connect: [
          { id: n1ac1.id },
          { id: n2ac2.id },
          { id: n3ac1.id },
          { id: n1ac4.id },
        ],
      },
    },
  });
  const e5p1 = await prisma.enseignement.create({
    data: {
      libelle: "Introduction aux bases de donn√©es",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e6p1 = await prisma.enseignement.create({
    data: {
      libelle: "Math√©matiques discr√®tes",
      periode: {
        connect: { id: periode3.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e7p1 = await prisma.enseignement.create({
    data: {
      libelle: "Outils fondamentaux",
      periode: {
        connect: { id: periode4.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e8p1 = await prisma.enseignement.create({
    data: {
      libelle: "Introduction √† la gestion des organisations",
      periode: {
        connect: { id: periode4.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e9p1 = await prisma.enseignement.create({
    data: {
      libelle: "Introduction √† l'√©conomie",
      periode: {
        connect: { id: periode3.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e9p10 = await prisma.enseignement.create({
    data: {
      libelle: "PPP",
      periode: {
        connect: { id: periode1.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e11p1 = await prisma.enseignement.create({
    data: {
      libelle: "Anglais",
      periode: {
        connect: { id: periode1.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e12p1 = await prisma.enseignement.create({
    data: {
      libelle: "D√©veloppement Objet",
      periode: {
        connect: { id: periode1.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });

  const e1p2 = await prisma.enseignement.create({
    data: {
      libelle: "D√©veloppement d'applications mobiles",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e2p2 = await prisma.enseignement.create({
    data: {
      libelle: "Qualit√© de d√©veloppement",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e3p2 = await prisma.enseignement.create({
    data: {
      libelle: "R√©seaux & bas niveau",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e4p2 = await prisma.enseignement.create({
    data: {
      libelle: "Services r√©seaux",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e5p2 = await prisma.enseignement.create({
    data: {
      libelle: "Exploitation bases de donn√©es",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e6p2 = await prisma.enseignement.create({
    data: {
      libelle: "Graphes et recherche arborescente",
      periode: {
        connect: { id: periode3.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e7p2 = await prisma.enseignement.create({
    data: {
      libelle: "Statistiques descriptives",
      periode: {
        connect: { id: periode4.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e8p2 = await prisma.enseignement.create({
    data: {
      libelle: "M√©thodes num√©riques",
      periode: {
        connect: { id: periode2.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e9p2 = await prisma.enseignement.create({
    data: {
      libelle: "Intro GSI",
      periode: {
        connect: { id: periode3.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e10p2 = await prisma.enseignement.create({
    data: {
      libelle: "Droit",
      periode: {
        connect: { id: periode4.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e11p2 = await prisma.enseignement.create({
    data: {
      libelle: "Anglais",
      periode: {
        connect: { id: periode3.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e12p2 = await prisma.enseignement.create({
    data: {
      libelle: "Communication techniques",
      periode: {
        connect: { id: periode3.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });
  const e13p2 = await prisma.enseignement.create({
    data: {
      libelle: "PPP",
      periode: {
        connect: { id: periode4.id },
      },
      formation: {
        connect: { id: formationIA.id },
      },
    },
  });

  // Blocs de comp√©tence
  const bcc1 = await prisma.bloc_de_competence.create({
    data: {
      libelle: "Impl√©mentation d'un besoin client",
      version: {
        connect: { id: version10.id },
      },
      credits: 24,
      competences: {
        connect: { id: competenceDevAppli.id },
      },
      apprentissage_critiques: {
        connect: [
          { id: n1ac1.id },
          { id: n2ac2.id },
          { id: n3ac1.id },
          { id: n1ac4.id },
        ],
      },
    },
  });

  const ec1bcc1 = await prisma.element_constitutif.create({
    data: {
      libelle: e4p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc1.id },
      },
      enseignement: {
        connect: { id: e4p1.id },
      },
      volume_horaire_td: 15,
      volume_horaire_cm: 10,
      volume_horaire_tp: 24,
    },
  });
  const ec2bcc1 = await prisma.element_constitutif.create({
    data: {
      libelle: e2p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc1.id },
      },
      enseignement: {
        connect: { id: e2p1.id },
      },
      volume_horaire_td: 11,
      volume_horaire_cm: 35,
      volume_horaire_tp: 21,
    },
  });
  const ec3bcc1 = await prisma.element_constitutif.create({
    data: {
      libelle: e8p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc1.id },
      },
      enseignement: {
        connect: { id: e8p1.id },
      },
      volume_horaire_td: 54,
      volume_horaire_cm: 23,
      volume_horaire_tp: 48,
    },
  });

  const bcc2 = await prisma.bloc_de_competence.create({
    data: {
      libelle: "D√©couvertes des mati√®res fondamentales",
      version: {
        connect: { id: version10.id },
      },
      credits: 32,
      competences: {
        connect: { id: competenceOptiAppli.id },
      },
      parcours: {
        connect: { id: parcoursIA.id },
      },
      est_tronc_commun: false,
      apprentissage_critiques: {
        connect: [
          { id: n1ac1.id },
          { id: n2ac2.id },
          { id: n3ac1.id },
          { id: n1ac4.id },
        ],
      },
    },
  });

  const ec1bcc2 = await prisma.element_constitutif.create({
    data: {
      libelle: e4p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc1.id },
      },
      enseignement: {
        connect: { id: e4p1.id },
      },
      volume_horaire_td: 15,
      volume_horaire_cm: 10,
      volume_horaire_tp: 24,
    },
  });
  const ec2bcc2 = await prisma.element_constitutif.create({
    data: {
      libelle: e6p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc2.id },
      },
      enseignement: {
        connect: { id: e6p1.id },
      },
      volume_horaire_td: 9,
      volume_horaire_cm: 3,
      volume_horaire_tp: 14,
    },
  });
  const ec3bcc2 = await prisma.element_constitutif.create({
    data: {
      libelle: e7p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc2.id },
      },
      enseignement: {
        connect: { id: e7p1.id },
      },
      volume_horaire_td: 32,
      volume_horaire_cm: 6,
      volume_horaire_tp: 2,
    },
  });
  const ec4bcc2 = await prisma.element_constitutif.create({
    data: {
      libelle: e8p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc2.id },
      },
      enseignement: {
        connect: { id: e8p1.id },
      },
      volume_horaire_td: 16,
      volume_horaire_cm: 6,
      volume_horaire_tp: 8,
    },
  });
  const ec5bcc2 = await prisma.element_constitutif.create({
    data: {
      libelle: e9p1.libelle,
      bloc_de_competence: {
        connect: { id: bcc2.id },
      },
      enseignement: {
        connect: { id: e9p1.id },
      },
      volume_horaire_td: 21,
      volume_horaire_cm: 12,
      volume_horaire_tp: 21,
    },
  });
  console.log('Injection des donn√©es termin√©e.')
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
